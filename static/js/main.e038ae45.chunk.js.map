{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","store/actions/counter.js","store/actions/actionTypes.js","store/actions/result.js","App.js","registerServiceWorker.js","store/utility.js","store/reducers/counterReducer.js","store/reducers/resultReducer.js","index.js"],"names":["counterControl","props","react_default","a","createElement","className","onClick","clicked","label","counterOutput","value","Counter","_this","this","CounterOutput_CounterOutput","counter","CounterControl_CounterControl","onIncrementCounter","onDecrementCounter","onAddCounter","onSubstractCounter","storeResult","storedResults","map","result","index","key","id","deleteResult","Component","connect","state","reducer1","reducer2","results","dispatch","type","getState","setTimeout","console","log","saveResult","actionCreators","resultElementId","App","containers_Counter_Counter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","updateObject","oldObject","updatedValues","Object","objectSpread","initialState","counterReducer","arguments","length","undefined","action","resultReducer","concat","Math","random","filter","rootReducer","combineReducers","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e038ae45.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './CounterControl.css';\r\n\r\nconst counterControl = (props) => (\r\n    <div className=\"CounterControl\" onClick={props.clicked}>\r\n        {props.label}\r\n    </div>\r\n);\r\n\r\nexport default counterControl;","import React from 'react';\r\n\r\nimport './CounterOutput.css';\r\n\r\nconst counterOutput = (props) => (\r\n    <div className=\"CounterOutput\">\r\n        Current Counter: {props.value}\r\n    </div>\r\n);\r\n\r\nexport default counterOutput;","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport CounterControl from \"../../components/CounterControl/CounterControl\"\r\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\"\r\nimport * as actionCreators from \"../../store/actions/index\"\r\n\r\nclass Counter extends Component {\r\n   render() {\r\n      return (\r\n         <div>\r\n            <CounterOutput value={this.props.counter} />\r\n            <CounterControl label=\"Increment\" clicked={this.props.onIncrementCounter} />\r\n            <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter} />\r\n            <CounterControl label=\"Add 5\" clicked={this.props.onAddCounter} />\r\n            <CounterControl label=\"Subtract 2\" clicked={this.props.onSubstractCounter} />\r\n            <hr />\r\n            <button onClick={() => this.props.storeResult(this.props.counter)}>Store Result</button>\r\n            <ul>\r\n               {this.props.storedResults.map((result, index) => (\r\n                  <li key={result.id} onClick={() => this.props.deleteResult(result.id)}>\r\n                     {result.value}\r\n                  </li>\r\n               ))}\r\n            </ul>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\n/* Maps the state managed by redux to props of this container*/\r\nconst mapStateToProps = state => {\r\n   return {\r\n      counter: state.reducer1.counter,\r\n      storedResults: state.reducer2.results,\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      onIncrementCounter: () => dispatch(actionCreators.increment()),\r\n      onDecrementCounter: () => dispatch(actionCreators.decrement()),\r\n      onAddCounter: () => dispatch(actionCreators.add(5)),\r\n      onSubstractCounter: () => dispatch(actionCreators.substract(2)),\r\n      storeResult: result => dispatch(actionCreators.storeResult(result)),\r\n      deleteResult: id => dispatch(actionCreators.deleteResult(id)),\r\n   }\r\n}\r\n\r\n/* Connect is a function that returns a function */\r\nexport default connect(\r\n   mapStateToProps,\r\n   mapDispatchToProps\r\n)(Counter)\r\n","import * as actionTypes from \"./actionTypes\"\r\n\r\nexport const increment = () => {\r\n    return {\r\n       type: actionTypes.INCREMENT,\r\n    }\r\n }\r\n \r\n export const decrement = () => {\r\n    return {\r\n       type: actionTypes.DECREMENT,\r\n    }\r\n }\r\n \r\n export const add = value => {\r\n    return {\r\n       type: actionTypes.ADD,\r\n       value: value,\r\n    }\r\n }\r\n \r\n export const substract = value => {\r\n    return {\r\n       type: actionTypes.SUBSTRACT,\r\n       value: value,\r\n    }\r\n }","export const INCREMENT = \"INCREMENT\"\r\nexport const DECREMENT = \"DECREMENT\"\r\nexport const ADD = \"ADD\"\r\nexport const SUBSTRACT = \"SUBSTRACT\"\r\nexport const STORE_RESULT = \"STORE_RESULT\"\r\nexport const DELETE_RESULT = \"DELETE_RESULT\"\r\n\r\n\r\n","import * as actionTypes from \"./actionTypes\"\r\n\r\nexport const saveResult = result => {\r\n   return {\r\n      type: actionTypes.STORE_RESULT,\r\n      result: result,\r\n   }\r\n}\r\n\r\nexport const storeResult = result => {\r\n   return (dispatch, getState) => {\r\n      setTimeout(() => {\r\n         console.log(\"Old Counter: \", getState().reducer1.counter)\r\n         dispatch(saveResult(result))\r\n      }, 500)\r\n   }\r\n}\r\n\r\nexport const deleteResult = resultElementId => {\r\n   return {\r\n      type: actionTypes.DELETE_RESULT,\r\n      resultElementId: resultElementId,\r\n   }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Counter from \"./containers/Counter/Counter\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Counter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n   window.location.hostname === \"localhost\" ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === \"[::1]\" ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport default function register() {\r\n   if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n      if (publicUrl.origin !== window.location.origin) {\r\n         // Our service worker won't work if PUBLIC_URL is on a different origin\r\n         // from what our page is served on. This might happen if a CDN is used to\r\n         // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n         return\r\n      }\r\n\r\n      window.addEventListener(\"load\", () => {\r\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n         if (!isLocalhost) {\r\n            // Is not local host. Just register service worker\r\n            registerValidSW(swUrl)\r\n         } else {\r\n            // This is running on localhost. Lets check if a service worker still exists or not.\r\n            checkValidServiceWorker(swUrl)\r\n         }\r\n      })\r\n   }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n   navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n         registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing\r\n            installingWorker.onstatechange = () => {\r\n               if (installingWorker.state === \"installed\") {\r\n                  if (navigator.serviceWorker.controller) {\r\n                     // At this point, the old content will have been purged and\r\n                     // the fresh content will have been added to the cache.\r\n                     // It's the perfect time to display a \"New content is\r\n                     // available; please refresh.\" message in your web app.\r\n                     console.log(\"New content is available; please refresh.\")\r\n                  } else {\r\n                     // At this point, everything has been precached.\r\n                     // It's the perfect time to display a\r\n                     // \"Content is cached for offline use.\" message.\r\n                     console.log(\"Content is cached for offline use.\")\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      })\r\n      .catch(error => {\r\n         console.error(\"Error during service worker registration:\", error)\r\n      })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n   // Check if the service worker can be found. If it can't reload the page.\r\n   fetch(swUrl)\r\n      .then(response => {\r\n         // Ensure service worker exists, and that we really are getting a JS file.\r\n         if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\r\n            // No service worker found. Probably a different app. Reload the page.\r\n            navigator.serviceWorker.ready.then(registration => {\r\n               registration.unregister().then(() => {\r\n                  window.location.reload()\r\n               })\r\n            })\r\n         } else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl)\r\n         }\r\n      })\r\n      .catch(() => {\r\n         console.log(\"No internet connection found. App is running in offline mode.\")\r\n      })\r\n}\r\n\r\nexport function unregister() {\r\n   if (\"serviceWorker\" in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n         registration.unregister()\r\n      })\r\n   }\r\n}\r\n","export const updateObject = (oldObject, updatedValues) => {\r\n   return {\r\n      ...oldObject,\r\n      ...updatedValues,\r\n   }\r\n}\r\n","import * as actionTypes from \"../actions/actionTypes\"\r\nimport { updateObject } from \"../utility\"\r\n\r\nconst initialState = {\r\n   counter: 0,\r\n}\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case actionTypes.INCREMENT:\r\n         return updateObject(state, { counter: state.counter + 1 })\r\n      case actionTypes.DECREMENT:\r\n         return updateObject(state, { counter: state.counter - 1 })\r\n      case actionTypes.ADD:\r\n         return updateObject(state, { counter: state.counter + action.value })\r\n      case actionTypes.SUBSTRACT:\r\n         return updateObject(state, { counter: state.counter / action.value })\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport default counterReducer\r\n","import * as actionTypes from \"../actions/actionTypes\"\r\nimport { updateObject } from \"../utility\"\r\n\r\nconst initialState = {\r\n   results: [],\r\n}\r\n\r\nconst resultReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case actionTypes.STORE_RESULT:\r\n         return updateObject(state, {\r\n            results: state.results.concat({ id: Math.random() * Math.random(), value: action.result }),\r\n         })\r\n      case actionTypes.DELETE_RESULT:\r\n         return updateObject(state, { results: state.results.filter(result => result.id !== action.resultElementId) })\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport default resultReducer\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Provider } from \"react-redux\"\r\nimport { applyMiddleware, combineReducers, compose, createStore } from \"redux\"\r\nimport App from \"./App\"\r\nimport \"./index.css\"\r\nimport registerServiceWorker from \"./registerServiceWorker\"\r\nimport counterReducer from \"./store/reducers/counterReducer\"\r\nimport resultReducer from \"./store/reducers/resultReducer\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nconst rootReducer = combineReducers({\r\n   reducer1: counterReducer,\r\n   reducer2: resultReducer,\r\n})\r\n\r\nconst logger = store => {\r\n   return next => {\r\n      return action => {\r\n         console.log(\"[Middleware Dispatching\", action)\r\n         const result = next(action)\r\n         console.log(\"[Middleware next state\", store.getState())\r\n         return result\r\n      }\r\n   }\r\n}\r\n\r\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnchancers(applyMiddleware(logger, thunk)))\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <App />\r\n   </Provider>,\r\n   document.getElementById(\"root\")\r\n)\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}